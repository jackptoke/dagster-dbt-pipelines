services:
  dagster-postgres:
    image: pgduckdb/pgduckdb:17-main
    environment:
      - POSTGRES_USER=${DAGSTER_POSTGRES_USER}
      - POSTGRES_PASSWORD=${DAGSTER_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DAGSTER_POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - dagster-postgres:/var/lib/postgresql/data
    networks:
      - dagster_network
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U dagster -d dagster' ]
      interval: 10s
      timeout: 8s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    container_name: dagster-minio
    hostname: minio
    restart: always
    volumes:
      - minio:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - dagster_network

  dagster-dagit:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./dagster_university:/opt/dagster/dagster_home/dagster_university
      - ./data:/opt/dagster/dagster_home/data
      - ./analytics:/opt/dagster/dagster_home/analytics
    ports:
      - 3000:3000
    env_file:
      - .env
    networks:
      - dagster_network
    depends_on:
      dagster-postgres:
        condition: service_healthy

  dagster-code-location:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint:
      - dagster
      - code-server
      - start
      - -h
      - "0.0.0.0"
      - -p
      - "4000"
      - -m
      - dagster_university
    ports:
      - 4000:4000
    volumes:
      - ./dagster_university:/opt/dagster/dagster_home/dagster_university
      - ./analytics:/opt/dagster/dagster_home/analytics
      - ./data:/opt/dagster/dagster_home/data
    networks:
      - dagster_network
    env_file:
      - .env
    depends_on:
      dagster-postgres:
        condition: service_healthy

  dagster-daemon:
    build:
      context: .
      dockerfile: Dockerfile
    command: "dagster-daemon run"
    environment:
      - PGPASS=${DAGSTER_POSTGRES_PASSWORD}
    volumes:
      - ./dagster_university:/opt/dagster/dagster_home/dagster_university
      - ./analytics:/opt/dagster/dagster_home/analytics
      - ./data:/opt/dagster/dagster_home/data
    networks:
      - dagster_network
    env_file:
      - .env
    depends_on:
      dagster-dagit:
        condition: service_started
      dagster-postgres:
        condition: service_healthy

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile_streamlit
    restart: always
    volumes:
      - ./dashboard:/app
      - ./data:/app/data
    entrypoint:
      - streamlit
      - run
      - streamlit_app.py
      - --server.port=8501
      - --server.address=0.0.0.0
    env_file:
      - .env
    expose:
      - "8501"
    ports:
      - "8501:8501"
    networks:
      - dagster_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8501/_stcore/health" ]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      dagster-dagit:
        condition: service_started

networks:
  dagster_network:
    driver: bridge
    name: dagster_network

volumes:
  docker-pgduckdb:
    driver: local
  minio:
    driver: local
  dagster-postgres:
    driver: local